# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Loliboo API
  version: "1.0.0"
# the domain of the service
host: api.uber.com
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
produces:
  - application/json
paths:
  /registration:
    post:
      summary: Registration
      description: |
        The registration endpoint registers new user.
        
      parameters:
        - name: User
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRegistrationModel'
      responses:
        200:
          description: Returns nothing
        400:
          description: Something is null or  user with these parameters already exists
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      description: |
        The login endpoint logins user
      parameters:
        - name: Credentials
          in: body
          required: true
          schema: 
             $ref: '#/definitions/CredentialsModel'
      responses:
        200:
          description: Token
          schema: 
             $ref: '#/definitions/TokenModel'
        default:
          schema:
            $ref: '#/definitions/Error'
          description: Password is incorrect or user doesn't exist
  /changeCredentials:
    post:
      summary: Changes Credentials
      description: Allows User to change his Credentials (such as Email and Password)
      parameters:
        - name: UserInfo
          in: body
          description: Only OldPassword is required
          schema: 
             $ref: '#/definitions/UserChangeCredentialsModel'
      tags:
        - User
      responses:
        200:
          description: Changes either email, password or both
        400:
          description: Incorrect password
          schema:
            $ref: '#/definitions/Error'
      security: 
        - LolibooAuth: []
  /getUser:
    post:
      summary: Returns User
      description: Returns information about the User requested by Email
      tags:
        - User
      parameters:
        - name: UserEmail
          in: body
          schema: 
            $ref: '#/definitions/UserOnlyEmailModel'
          description: Email of the User
          required: true
      responses:
        200:
          description: Profile information for a user
          schema:
            $ref: '#/definitions/UserToGetModel'
        400:
          description: User doesn't exist
          schema:
            $ref: '#/definitions/Error'
      security: 
       - LolibooAuth: []
  /changeInfo:
    post:
      summary: Changes Info
      description: Allows the user to change his information besides Email and Password
      parameters:
        - name: User
          in: body
          description: Only Email is required
          schema:
            $ref: '#/definitions/UserChangeInfoModel'
      tags:
        - User
      responses:
        200:
          description: Changed info for the user
        default:
          description: Unexpected error
      security: 
        - LolibooAuth: []
securityDefinitions:
  LolibooAuth:
    type: oauth2
    flow: password
    description: Authentication using tokens. You should put token after key word 'Bearer' in the property 'Authorization' in header. Example -
     'Bearer AQAAANCMnd8BFdERjHoAwE_ClsBAAAAj__ylFCqMkS86akSPELkpgAAAAACAAAAAAAQZgAAAAEAACAAAAAHiljO0w4bIxejcvm3dJ3nVSjhqx1f7PEMPwd0feUvgAAAAAOgAAAAAIAACAAAABW9VAXOUKQh74Kw0_4XUHeJZacXOBrECQA1Jm4CCyNFsAAAAD75E...'
    tokenUrl: http://ec2-54-93-123-90.eu-central-1.compute.amazonaws.com/login
definitions:
  UserChangeCredentialsModel:
    type: object
    properties:
      Email:
        type: string
      OldPassword:
        type: string
      PasswordHash:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  UserToGetModel:
    type: object
    properties:
      Email: 
        type: string
      Name:
        type: string
  UserRegistrationModel:
    type: object
    properties:
      Name:
        type: string
      Email:
        type: string
      PasswordHash:
        type: string  
  UserChangeInfoModel:
    type: object
    properties:
      Email: 
        type: string
      Name:
        type: string
  CredentialsModel:
    type: object
    properties:
      grant_type:
        type: string
        description: must be 'password'
      email:
        type: string
      password:
        type: string
  UserOnlyEmailModel:
    type: object
    properties:
      Email:
        type: string
  TokenModel:
    type: object
    properties:
      access_token:
        type: string
      token_type:
        type: string
      expires_in:
        type: string